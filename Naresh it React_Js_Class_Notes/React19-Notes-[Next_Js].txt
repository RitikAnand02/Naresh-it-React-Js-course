What is difference between a library & framework?
- React is a library. It can build application but can't control the application flow.
- Next JS is a framework. It can build and control the application flow.

						NextJs
					              ========
What is Next.js ?
- Next.js is a React framework that help you to build fast, scalable and production ready web applications.

Features of Next.js:
1. File Base Routing
    - You just configure the file system.
    - Routing is implicitly configured.

        fashion/page.js        => File
        /fashion                => Route => page.js is startup

2. Server-Side Rendering (SSR) & Static Site Generation (SSG)
    - Pages can be pre-rendered on server.
    - Faster in rendering
    - Improves the performance and SEO.

3. API Routes
    - You can build backend endo points in same app.
    - Both client  side and server side routes are configured.
    - You can build a complete full stack application.

4. Built-in CSS and Sass Support
    - Supports CSS modules
    - Supports Sass

5. Image Optimization
    - Automatically optimizes images using <Image> component.
    - It improves performance of application.

6. Fast Refresh

Setup Environment and Create React Next.js Application:

1. Install Node JS on your PC  [ requires Node 14+ versions ]

2. Visual Studio Code Editor

3. Go to any PC location using command prompt and run the command

        D:\> npx  create-next-app@latest    [app_name_optional]

         What is your project named?  react-next-app
         Would you like to use TypeScript? No
         Would you like to use ESLint? Yes
         Would you like to use Tailwind CSS? Yes
         Would you like your code inside a `src/` directory? Yes
         Would you like to use App Router? (recommended) : Yes
         Would you like to use Turbopack for `next dev`?  Yes
         Would you like to customize the import alias (`@/*` by default)? No

       
4. Open your project folder in VS Code

        D:\react-next-app

5. Start  your Next app

        > npm run dev


6. To customize initial page, go to "src/app/page.js"

   
- What is a library?
- What is a framework?
- Create an Next JS application
- Features of Next JS

                        Next JS Routing
1. Create a new Next JS application with React template

        >npx  create-next-app@latest

        E:\next-shopping-app

2. Open in VS code

3. Go to "src/app/layout.js"
   
    - It configures the RootLayout
    - Root is rendered on initial request
    - It comprises of default routes
    - It renders markup using view engine.
    - It configures a route-outlet, that defines where the resulting markup must be
      rendered.
    - Outlet is configured by using children

4. src/app

        kids/page.js
        men/page.js
        women/page.js

export default function Women(){
    return(
        <div>
            <h3>Women Fashion</h3>
        </div>
    )
}

5. Change the layout with Links
        layout.js
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Link from "next/link";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
       <header>
          <nav className="text-center">
             <h4 className="text-center">Shopping App</h4>
             <div>
                <span> <Link href={'/kids'}> Kids </Link> </span> |
                <span> <Link href={'/men'}> Men </Link> </span> |
                <span> <Link href={'/women'}> Women </Link> </span>
             </div>
          </nav>
       </header>
       <hr />
       <section>
            {children}
       </section>
      </body>
    </html>
  );
}

                        Data Fetching & Caching

Server Side Data Fetch:
- Next JS uses "fetch" API.
- Server side fetch uses asynchronous React Server Component

1. Go to app
2. Add a new folder  fakestore/page.js


export default async function Fakestore()
{
    const data = await fetch('https://fakestoreapi.com/products/categories&#39;);
    const categories = await data.json();

    return(
        <div>
            <ol>
                {
                    categories.map(category=><li key={category}>{category}</li>)
                }
            </ol>
        </div>
    )
}

3. layout.js

import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Link from "next/link";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
       <header>
          <nav className="text-center">
             <h4 className="text-center">Shopping App</h4>
             <div>
                <span> <Link href={'/fakestore'}> Shop </Link> </span> |
                <span> <Link href={'/kids'}> Kids </Link> </span> |
                <span> <Link href={'/men'}> Men </Link> </span> |
                <span> <Link href={'/women'}> Women </Link> </span>
             </div>
          </nav>
       </header>
       <hr />
       <section>
            {children}
       </section>
      </body>
    </html>
  );
}

                    Fetching Data on the client
- It is always recommended to fetch data on the server-side
- Client side data fetching is managed using React components and Hooks
- useEffect, useState
- axios, jquery ajax, fetch etc.
- You can configure server and client components by using the directives

    a) use server
    b) use client

  src/app/products/page.js

'use client'

import { useState, useEffect } from "react";
import Fakestore from "../fakestore/page";

export default function Products(){

    const [products, setProducts] = useState([]);

    async function GetProducts(){
        const result = await fetch('https://fakestoreapi.com/products&#39;);
        const data = await result.json();
        setProducts(data);
    }

    useEffect(()=>{
        GetProducts();
    },[])

    return(
        <div>
            <div>
               
            </div>
            <ul>
                {
                    products.map(product=><li key={product.id}>{product.title}</li>)
                }
            </ul>
        </div>
    )
}